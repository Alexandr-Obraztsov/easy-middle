import { GeminiClient } from "./gemini-client";

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ GeminiClient
export async function geminiExample(): Promise<void> {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Gemini Developer API
  const gemini = new GeminiClient({
    apiKey: "YOUR_API_KEY_HERE", // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
    model: "gemini-2.0-flash-001",
    temperature: 0.7,
    topP: 0.8,
    topK: 40,
    maxOutputTokens: 8192,
    apiVersion: "v1beta",
  });

  // –ü—Ä–∏–º–µ—Ä –¥–ª—è Vertex AI (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Vertex AI)
  /*
  const geminiVertexAI = new GeminiClient({
    apiKey: '', // –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è Vertex AI
    useVertexAI: true,
    project: 'your-project-id',
    location: 'us-central1',
    model: 'gemini-2.0-flash-001',
    temperature: 0.7
  })
  */

  try {
    // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    console.log("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Gemini...");
    const isConnected = await gemini.testConnection();

    if (!isConnected) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gemini API");
      return;
    }

    console.log("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Gemini —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
    const modelInfo = gemini.getModelInfo();
    console.log("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:", modelInfo);

    // –ü—Ä–∏–º–µ—Ä 1: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    console.log("\n--- üöÄ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ---");
    const singleResponse = await gemini.generateContent(
      "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é —à—É—Ç–∫—É –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤."
    );
    console.log("üí¨ –û—Ç–≤–µ—Ç:", singleResponse.text);
    if (singleResponse.usage) {
      console.log("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:", singleResponse.usage);
    }

    // –ü—Ä–∏–º–µ—Ä 2: –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    console.log("\n--- üåä –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ---");
    console.log("üí¨ –°—Ç—Ä–∏–º –æ—Ç–≤–µ—Ç–∞:");
    for await (const chunk of gemini.generateContentStream(
      "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ TypeScript"
    )) {
      if (!chunk.done) {
        process.stdout.write(chunk.text);
      }
    }
    console.log("\n‚úÖ –°—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω");

    // –ü—Ä–∏–º–µ—Ä 3: –°–µ—Å—Å–∏—è —á–∞—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    console.log("\n--- üí≠ –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ ---");
    gemini.startChatSession(
      "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö."
    );

    const chatResponse1 = await gemini.sendMessage(
      "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ TypeScript?"
    );
    console.log("üí¨ –û—Ç–≤–µ—Ç 1:", chatResponse1.text);

    const chatResponse2 = await gemini.sendMessage(
      "–ê –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –µ—ë –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π?"
    );
    console.log("üí¨ –û—Ç–≤–µ—Ç 2:", chatResponse2.text);

    // –ü—Ä–∏–º–µ—Ä 4: –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —á–∞—Ç
    console.log("\n--- üåä –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —á–∞—Ç ---");
    console.log("üí¨ –°—Ç—Ä–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:");
    for await (const chunk of gemini.sendMessageStream(
      "–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –¥–∂–µ–Ω–µ—Ä–∏–∫–∏ –≤ TypeScript –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"
    )) {
      if (!chunk.done) {
        process.stdout.write(chunk.text);
      }
    }
    console.log("\n‚úÖ –°—Ç—Ä–∏–º —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    console.log("\n--- üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ---");
    const history = gemini.getConversationHistory();
    history.forEach((message, index) => {
      const truncated =
        message.content.length > 100
          ? message.content.substring(0, 100) + "..."
          : message.content;
      console.log(
        `${index + 1}. [${message.role === "user" ? "üë§" : "ü§ñ"}] ${truncated}`
      );
    });

    // –ü—Ä–∏–º–µ—Ä 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log("\n--- ‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ---");
    gemini.updateConfig({
      temperature: 0.9,
      maxOutputTokens: 4096,
    });

    const creativeResponse = await gemini.sendMessage(
      "–ü—Ä–∏–¥—É–º–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–∞—Ç–∞ —Å –ò–ò"
    );
    console.log("üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç:", creativeResponse.text);

    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    console.log("\n--- üßπ –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é ---");
    gemini.clearHistory();
    console.log("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥–ª–∞–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º Electron
export function setupGeminiInMainProcess(): GeminiClient | null {
  // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
  const apiKey =
    process.env.GEMINI_API_KEY ||
    process.env.GOOGLE_API_KEY ||
    "YOUR_API_KEY_HERE";

  if (apiKey === "YOUR_API_KEY_HERE") {
    console.warn(
      "‚ö†Ô∏è  API –∫–ª—é—á Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GEMINI_API_KEY –∏–ª–∏ GOOGLE_API_KEY"
    );
    return null;
  }

  try {
    const gemini = new GeminiClient({
      apiKey,
      model: "gemini-2.0-flash-001",
      temperature: 0.7,
      apiVersion: "v1beta",
    });

    console.log("‚úÖ Gemini –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ");
    return gemini;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini:", error);
    return null;
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ (Function Calling)
export async function geminiWithFunctionsExample(): Promise<void> {
  const gemini = new GeminiClient({
    apiKey: "YOUR_API_KEY_HERE",
    model: "gemini-2.0-flash-001",
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
  const controlLightFunction = {
    name: "controlLight",
    description: "–£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–≤–µ—â–µ–Ω–∏–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ",
    parametersJsonSchema: {
      type: "object",
      properties: {
        brightness: {
          type: "number",
          description: "–Ø—Ä–∫–æ—Å—Ç—å –æ—Ç 0 –¥–æ 100",
        },
        colorTemperature: {
          type: "string",
          description: "–¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: warm, neutral, cool",
        },
      },
      required: ["brightness", "colorTemperature"],
    },
  };

  try {
    const response = await gemini.generateContentWithFunctions(
      "–°–¥–µ–ª–∞–π —Å–≤–µ—Ç –ø–æ—Ç–µ–ø–ª–µ–µ –∏ –ø—Ä–∏–≥–ª—É—à–∏ –¥–æ 30%",
      [controlLightFunction],
      "ANY"
    );

    console.log("üîß –û—Ç–≤–µ—Ç —Å –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏:", response.text);
    console.log("üìû –í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π:", response.functionCalls);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:", error);
  }
}
